/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package autotradingsim.ui;

import autotradingsim.strategy.indicators.MeasurementFactory;
import autotradingsim.strategy.rules.IMeasurement;
import javax.swing.DefaultComboBoxModel;

/**
 *
 * @author Shirley
 */
public class IndicatorPicker extends javax.swing.JDialog {

    /**
     * Creates new form IndicatorPicker
     */
    DefaultComboBoxModel<String> indicatorTypes = new DefaultComboBoxModel();
    public IndicatorPicker(java.awt.Dialog parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setLocation(parent.getX() + parent.getWidth()/2 - this.getWidth()/2, 
                         parent.getY() + parent.getHeight()/2 - this.getHeight()/2);
        indicatorType.setModel(indicatorTypes);
        setIndicatorTypes();
    }
    
    private void setIndicatorTypes(){
        indicatorTypes.addElement("Simple Moving Average");
        indicatorTypes.addElement("Net absolute change");
        indicatorTypes.addElement("Average absolute change");
        indicatorTypes.addElement("Net relative change");
        indicatorTypes.addElement("Average relative change");
        indicatorTypes.addElement("Single Day Value");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        IndicatorLabel = new javax.swing.JLabel();
        indicatorType = new javax.swing.JComboBox<>();
        durationDaysField = new javax.swing.JTextField();
        averageDaysField = new javax.swing.JTextField();
        durationDaysLabel = new javax.swing.JLabel();
        averageDaysLabel = new javax.swing.JLabel();
        submit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        IndicatorLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        IndicatorLabel.setText("Make Your Indicator");

        indicatorType.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        indicatorType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        indicatorType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                indicatorTypeActionPerformed(evt);
            }
        });

        durationDaysField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                durationDaysFieldActionPerformed(evt);
            }
        });

        averageDaysField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                averageDaysFieldActionPerformed(evt);
            }
        });

        durationDaysLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        durationDaysLabel.setText("Duration in Days");

        averageDaysLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        averageDaysLabel.setText("Average in Days");

        submit.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        submit.setText("Submit");
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(durationDaysLabel)
                                    .addComponent(averageDaysLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(durationDaysField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(averageDaysField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(indicatorType, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(112, 112, 112)
                        .addComponent(IndicatorLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(154, 154, 154)
                        .addComponent(submit)))
                .addContainerGap(88, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(IndicatorLabel)
                .addGap(18, 18, 18)
                .addComponent(indicatorType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(durationDaysLabel)
                    .addComponent(durationDaysField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(averageDaysField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(averageDaysLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(submit)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_submitActionPerformed

    private void averageDaysFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_averageDaysFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_averageDaysFieldActionPerformed

    private void indicatorTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_indicatorTypeActionPerformed
        // TODO add your handling code here:

        if (indicatorType.getSelectedIndex()==0){ //simple moving average
            averageDaysLabel.setVisible(false);
            averageDaysField.setVisible(false);
            durationDaysField.setVisible(true);
            durationDaysLabel.setVisible(true);
        }else{
            if(indicatorType.getSelectedIndex()==5){ //single day value
                durationDaysField.setVisible(false);
                durationDaysLabel.setVisible(false);
                averageDaysLabel.setVisible(false);
                averageDaysField.setVisible(false);
            }else{
                durationDaysField.setVisible(true);
                durationDaysLabel.setVisible(true);
                averageDaysLabel.setVisible(true);
                averageDaysField.setVisible(true);
            }
        }

    }//GEN-LAST:event_indicatorTypeActionPerformed

    private void durationDaysFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_durationDaysFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_durationDaysFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IndicatorPicker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IndicatorPicker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IndicatorPicker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IndicatorPicker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                IndicatorPicker dialog = new IndicatorPicker(new javax.swing.JDialog(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    public IMeasurement run(){
        this.setVisible(true);
        IMeasurement indicator = null;
        //TODO typeCheck for durationDaysField and averageDaysField
        if (indicatorType.getSelectedIndex()==5){
            indicator = MeasurementFactory.newSingleDailyValue();
        }
        if(indicatorType.getSelectedIndex()==0){
            indicator = MeasurementFactory.newSimpleMovingAverage(Integer.parseInt(durationDaysField.getText())); 
        }
        if(indicatorType.getSelectedIndex()==1){
            IMeasurement measurement = MeasurementFactory.newSimpleMovingAverage(Integer.parseInt(averageDaysField.getText()));
            indicator = MeasurementFactory.
                            newAbsoluteNetChange(
                                    Integer.parseInt(durationDaysField.getText()),
                                    measurement);
        }
        if(indicatorType.getSelectedIndex()==2){
            IMeasurement measurement = MeasurementFactory.
                    newSimpleMovingAverage(Integer.parseInt(averageDaysField.getText()));
            indicator = MeasurementFactory.
                            newAbsoluteAverageChange(Integer.parseInt(durationDaysField.getText())
                                    , measurement);
        }
        if(indicatorType.getSelectedIndex()==3){
           IMeasurement measurement = MeasurementFactory.
                    newSimpleMovingAverage(Integer.parseInt(averageDaysField.getText()));
            indicator = MeasurementFactory.
                            newNetRelativeChange(Integer.parseInt(durationDaysField.getText()),
                                    measurement);
        }
        if(indicatorType.getSelectedIndex()==4){
           IMeasurement measurement = MeasurementFactory.
                    newSimpleMovingAverage(Integer.parseInt(averageDaysField.getText()));
            indicator = MeasurementFactory.
                            newAverageRelativeChange(Integer.parseInt(durationDaysField.getText()), 
                                    measurement);
        }
        return indicator;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel IndicatorLabel;
    private javax.swing.JTextField averageDaysField;
    private javax.swing.JLabel averageDaysLabel;
    private javax.swing.JTextField durationDaysField;
    private javax.swing.JLabel durationDaysLabel;
    private javax.swing.JComboBox<String> indicatorType;
    private javax.swing.JButton submit;
    // End of variables declaration//GEN-END:variables
}
